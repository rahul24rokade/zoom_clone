{"version":3,"sources":["zoom/microphone.png","zoom/webcam.png","zoom/Header.js","js/core.js","zoom/Home.js","zoom/Meeting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","len","k","s","text","i","charAt","Math","floor","random","length","id","n","HomePage","props","className","onClick","e","console","log","ID","zoom","history","push","createMeeting","placeholder","MeetingPage","classname","img","src","microphone","webcam","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,uLCc5BC,ICCD,EAfK,SAAEC,EAAKC,GAU1B,IATI,IAAMC,EAAI,SAACD,GAGX,IAFI,IAAIE,EAAO,GAEPC,EAAE,EAAGA,EAAEH,EAAGG,IACdD,GAFQ,SAEME,OAAOC,KAAKC,MAAMD,KAAKE,SAF7B,SAE6CC,SAEvD,OAAON,GAETO,EAAKR,EAAED,GACHU,EAAE,EAAGA,EAAEX,EAAKW,IAChBD,EAAI,IAAQR,EAAED,GAElB,OAAOS,GCiBQE,MA1Bf,SAAkBC,GASd,OACI,yBAAKC,UAAU,QACZ,0CACA,0CACA,yBAAKA,UAAY,WAChB,4BAAQA,UAAU,MAAMC,QAAW,SAAAC,GAAC,OAZtB,WAClBC,QAAQC,IAAI,wBACZ,IAAIC,EAAKC,EAAgB,EAAG,IAC5BH,QAAQC,IAAIL,GACZA,EAAMQ,QAAQC,KAAK,YAAcH,GAQWI,KAAxC,oBACA,2BAAOT,UAAY,YAAYU,YAAc,sBAE9C,yBAAKV,UAAY,gBACb,yBAAKA,UAAY,c,kCCejBW,MAjCf,WACI,OACI,yBAAKX,UAAU,WACb,yBAAKA,UAAU,cACf,yBAAKA,UAAU,YAEX,4BAAQA,UAAW,oBAEf,yBAAKY,UAAW,yBAAyBC,KAAG,EAACC,IAAMC,KAAnD,wBAGJ,4BAAQf,UAAW,uBAEf,yBAAKY,UAAW,yBAAyBC,KAAG,EAACC,IAAME,KAAnD,sBAIR,yBAAKhB,UAAU,aACX,wBAAIA,UAAU,kBAAd,iBACA,wBAAIA,UAAU,kBAAd,8BACA,yBAAKA,UAAU,YACX,4BAAQA,UAAU,kBAAlB,YAGA,4BAAQA,UAAU,kBAAlB,eCPHiB,MAbf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKjB,UAAU,OAEf,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,eAAeC,UAAWT,OCF9BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.8335c857.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/microphone.ca145fad.png\";","module.exports = __webpack_public_path__ + \"static/media/webcam.39ab82df.png\";","import React from \"react\";\r\n   \r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"header fixed\">\r\n            <h1>\r\n               \r\n            </h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","const generateID = ( len, k) => {\r\n    const s = (k) => {\r\n        var text = \"\",\r\n        chars = \"635237\" \r\n    for(let i=0; i<k; i++){\r\n        text += chars.charAt(Math.floor(Math.random()* chars.length));\r\n    }\r\n      return text;\r\n}\r\nvar id = s(k);\r\nfor(let n=0; n<len; n++){\r\n    id =+ '_' + s(k)\r\n}\r\nreturn id;\r\n}\r\nexport default{\r\n      generateID\r\n}","import React from \"react\";\r\nimport zoom from \"../js/core\"\r\n   \r\n\r\nfunction HomePage(props){\r\n\r\n    const createMeeting = () => {\r\n        console.log(\"creating new meeting\");\r\n        var ID = zoom.generateID(5, 10);\r\n        console.log(props);\r\n        props.history.push(\"/meeting/\" + ID);\r\n    }\r\n\r\n    return(\r\n        <div className=\"home\">\r\n           <h1>ZOOM CLONE</h1>\r\n           <h2>Lets Start</h2>\r\n           <div className = \"actions\">\r\n            <button className=\"btn\" onClick ={ e => createMeeting()} >JOIN NEW MEETING</button>\r\n            <input className = \"room-code\" placeholder = \"Enter code or id\"/>\r\n           </div>\r\n           <div className = \"tablet-Frame\">\r\n               <div className = \"tablet\"/>\r\n\r\n               \r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React from \"react\";\r\nimport microphone from './microphone.png'\r\nimport webcam from './webcam.png'  \r\n\r\nfunction MeetingPage(){\r\n    return(\r\n        <div className=\"meeting\">\r\n          <div className=\"screen rel\">\r\n          <div className=\"btns abs\">\r\n          \r\n              <button className =\"icon mic rel s24\">\r\n              \r\n                  <div classname= \"tip fontr abs s13 cfff\" img src ={microphone}>Turn off Microphone</div>\r\n              </button>\r\n              \r\n              <button className =\"icon webcam rel s24\">\r\n              \r\n                  <div classname= \"tip fontr abs s13 cfff\" img src ={webcam}>Turn off Webcam</div>\r\n              </button>\r\n          </div>\r\n          </div>\r\n          <div className=\"stats rel\">\r\n              <h2 className=\"s20 fontr c333\">Meeting ready</h2>\r\n              <h2 className=\"s14 fontr c333\"> localhost:3000/meeting/id</h2>\r\n              <div className=\"btns abs\">\r\n                  <button className=\"s14 fontr cfff\">\r\n                      Join now\r\n                  </button>\r\n                  <button className=\"s14 fontr cfff\">\r\n                      Present\r\n                  </button>\r\n              </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MeetingPage;\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter, Route} from \"react-router-dom\"\nimport Header from \"./zoom/Header\"\nimport HomePage from \"./zoom/Home\"\nimport MeetingPage from \"./zoom/Meeting\"\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        \n      <Route exact path=\"/\" component={HomePage}/>\n      <Route exact path=\"/meeting/:id\" component={MeetingPage}/>\n      </div>\n    </BrowserRouter>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}